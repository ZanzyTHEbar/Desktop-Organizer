name: App Builder
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
    branches:
      - main
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        target: [x86_64-pc-windows-gnu, x86_64-unknown-linux-musl]
        #include:
        #  - os: ubuntu-latest
        #    rust_target: x86_64-unknown-linux-gnu
        #  - os: windows-latest
        #    rust_target: x86_64-pc-windows-msvc
        #- os: macos-latest
        #  rust_target: x86_64-apple-darwin
        #- os: macos-latest
        #  rust_target: aarch64-apple-darwin
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ env.GITHUB_TOKEN }}

      #- name: PyInstaller Windows
      #  uses: JackMcKew/pyinstaller-action-windows@python3-10-pyinstaller-5-3
      #  with:
      #    path: src
      #- name: PyInstaller Linux
      #  uses: JackMcKew/pyinstaller-action-linux@python3.10
      #  with:
      #    path: src
      - name: Compile and release
        uses: rust-build/rust-build.action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          EXTRA_FILES: "README.md LICENSE"
          ARCHIVE_TYPES: "zip"
          MINIFY: "yes"

      - uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: output

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Directory
        run: mkdir -p dist
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./dist
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g conventional-changelog-conventionalcommits
      - run: npm install -g semantic-release@v19.0.5
      - run: npm install -g @semantic-release/exec
      - run: npm install -g @semantic-release/git
      - run: npm install -g @semantic-release/release-notes-generator
      - run: npm install -g @semantic-release/changelog
      - run: npm install -g @semantic-release/github
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./scripts/prepareCMD.sh
          semantic-release

  cleanup:
    name: Cleanup actions
    needs:
      - deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: production-files
